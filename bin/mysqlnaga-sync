#!/bin/env perl

use strict;
use warnings;

our $VERSION = '1.0';

use Cwd;
use DateTime;
use DateTime::Format::MySQL;
use DBI;
use File::Find;
use File::Path qw(make_path);
use File::Spec;
use Getopt::Long;
use Pod::Usage;

=pod

=head1 NAME

mysqlnaga-sync

=head1 SYNOPSIS

  mysqlnaga-sync --database DB [--directory DIR] \
    [--host HOST] [--port PORT] \
    [--user USER] [--pass PASS] \
    [--targethost HOST] [--targetport PORT] \
    [--targetuser USER] [--targetpass PASS] \
    [more options in -h]

=cut



my $OPTIONS = _parse_options();

my $SOURCE_DB = $OPTIONS->{database};
my $TARGET_DB = $OPTIONS->{targetdatabase};

my $VERBOSE    = $OPTIONS->{verbose};
my $NO_DUMP    = $OPTIONS->{'no-dump'};
my $NO_VIEWS   = $OPTIONS->{'no-views'};
my $USE_NAGA   = $OPTIONS->{'use-naga'};
my $DISABLE_FK = $OPTIONS->{'disable-foreign-keys'};

my $SOURCE_DBH = _open_dbh('source');
my $TARGET_DBH = _open_dbh('target');



#use Data::Dumper;
#print Dumper $OPTIONS;
#exit;

## Ready to run...
my $EXIT_CODE = 0;

process_db();

exit $EXIT_CODE;



## Subroutines

sub process_db {
  verbose("Working from source database '${SOURCE_DB}'");
  verbose("Working  to  target database '${TARGET_DB}'");
  
  if(! _has_database($TARGET_DBH, $TARGET_DB)) {
    verbose('DB does not exist on the target server; creating');
    _create_database($TARGET_DBH, $TARGET_DB);
  }
  
  ## This will change our connected to the equivalent target DB on
  ## each DBH
  _switch_db($SOURCE_DBH, $SOURCE_DB);
  _switch_db($TARGET_DBH, $TARGET_DB);
  
  my $SOURCE_TABLES = _schema_information($SOURCE_DBH, $SOURCE_DB);
  my $TARGET_TABLES = _schema_information($TARGET_DBH, $TARGET_DB);
  
  ## Loop through tables (and views)
  
  ## Compare and copy those that differ
  foreach my $table ( sort keys %{$SOURCE_TABLES} ) {
      if (!$SOURCE_TABLES->{$table}->{view}){
          _process_table($table,
                         $SOURCE_TABLES->{$table},
                         $TARGET_TABLES->{$table});
      }
      elsif(!$NO_VIEWS){
          _process_view($table,
                        $SOURCE_TABLES->{$table},
                        $TARGET_TABLES->{$table});
      }
  }
  
  
  ## Remove those not in the source (should be made optional?)
  foreach my $table( sort keys %{$TARGET_TABLES}) {
      if (!$TARGET_TABLES->{$table}->{view}) {
          _remove_table($table,
                        $SOURCE_TABLES->{$table},
                        $TARGET_TABLES->{$table});
      }
      elsif(!$NO_VIEWS){
          _remove_view($table,
                       $SOURCE_TABLES->{$table},
                       $TARGET_TABLES->{$table});
      }
  }
  
  
  ## What does this do?
  foreach my $table( sort keys %{$SOURCE_TABLES} ){
    next if $SOURCE_TABLES->{$table}->{view};
    next unless $SOURCE_TABLES->{$table}->{synced};
    _assert_state($table);
  }
  
  if($USE_NAGA) {
    verbose("\tRemoving LOADER-LOG.txt");
    my $filename = File::Spec->catfile( _dir(), 'LOADER-LOG.txt' );
    unlink $filename;
    verbose("\tLOADER-LOG.txt gone");
  }
  
  verbose("Finished with database '${SOURCE_DB}'");
  
  return;
}

sub _process_table {
  my ($table, $source_info, $target_info) = @_;

  verbose("\tWorking on table '${table}'");
  
  my $drop_table = 0;
  my $populate_table = 0;
  
  if(defined $target_info) {
    
    ## Populate only if source is younger than targte
    if($OPTIONS->{date}) {
        
      ## Returns -1 if source was older than target, 0 if equal & 1 if
      ## younger i.e. same situation which means we need to populate
      if(! defined $source_info->{date} || ! defined $target_info->{date}) {
        verbose("\tSource table date was undefined")
            if ! defined $source_info->{date};
        verbose("\tTarget table date was undefined")
            if ! defined $target_info->{date};
        verbose("\tConsider switching to --count or --checksum checks or flush the status of the table");
        $drop_table = 1;
        $populate_table = 1;
      }
      else {
        my $cmp = DateTime->compare_ignore_floating(
          $source_info->{date}, $target_info->{date});
        $drop_table = ($cmp > 0) ? 1 : 0;
        $populate_table = $drop_table;
      }
    }
    
    ## Populate if counts differ
    elsif($OPTIONS->{count}) {
      if($source_info->{count} != $target_info->{count}) {
        $drop_table = 1;
        $populate_table = 1;
      }
    }
    
    ## Populate if checksums differ
    elsif($OPTIONS->{checksum}) {
      my $src = _checksum($SOURCE_DBH, $table);
      my $trg = _checksum($TARGET_DBH, $table);
      $drop_table = $src ne $trg ;
      $populate_table = $drop_table;
    }
    
    else {
      die 'You have not said how to compare these schemas. Check the help';
    }
  }
  else {
    $populate_table = 1;
  }
  
  
  if($drop_table) {
    verbose("\tTable must be dropped");
    _drop_table($TARGET_DBH, $table);
  }
  
  
  if($populate_table) {
    verbose("\tTable must be repopulated");
    
    if($USE_NAGA) {
      verbose("\tUsing naga");
      _mysqlnaga_populate_table($table);
    }
    else {
      verbose("\tUsing mysqldump");
      _mysqldump_populate_table($table);
    }
    
    
    _analyse($table);
    $source_info->{synced} = 1;
  }
  else {
    verbose("\tTable is okay according to the used test");
  }
  
  verbose("\tFinished table");
  return;
}

sub _remove_table {
  my ($table, $source_info, $target_info) = @_;
  
  if(! defined $source_info && $target_info) {
    verbose("\tTable '${table}' exists on the target server but not on the local server");
    _drop_table($TARGET_DBH, $table);
    verbose("\tTable '${table}' has been dropped");
    
    ## Removing from filesystem
    find({ wanted => sub {
      my $name = $_;
      foreach my $suffix (qw(sql txt)) {
        if($name eq $table.q{.}.$suffix) {
          verbose("\tFound a data file for $name and will remove this");
          my $path = $File::Find::name;
          unlink $path;
        }
      }
      return;
    }}, _dir());
    verbose("\tTable '$table' has been dropped");
  }
  return;
}

sub _process_view {
  my ($view, $source_info, $target_info) = @_;
  if(defined $target_info) {
    verbose("\tView '$view' exists on the target server. Re-populating");
    _drop_view($TARGET_DBH, $view);
    verbose("\tView '$view' has been dropped");
  }
  verbose("\tView '$view' will be copied across");
  _copy_view_ddl($view);
  verbose("\tView has been copied");
  return;
}

sub _remove_view {
  my ($view, $source_info, $target_info) = @_;
  
  if(! defined $source_info && defined $target_info) {
    verbose("\tView '$view' does not exist on the source server. Dropping from target");
    _drop_view($TARGET_DBH, $view);
    
    ## Removing from filesystem
    find({ wanted => sub {
      my $name = $_;
      foreach my $suffix (qw(sql txt)) {
        if($name eq $view.q{.}.$suffix) {
          verbose("\tFound a data file for $name and will remove this");
          my $path = $File::Find::name;
          unlink $path;
        }
      }
      return;
    }}, _dir());
    verbose("\tView '$view' has been dropped");
  }
  return;
}

## Assertion is based on a table count
sub _assert_state {
  my ($table) = @_;
  my $sql = 'select count(*) from '.$SOURCE_DBH->quote_identifier($table);
  my $source_count = _perform_count($table, $SOURCE_DBH);
  my $target_count = _perform_count($table, $TARGET_DBH);
  if($source_count != $target_count) {
    print STDERR "FAIL: ${table} row count do not match in the source and target schema\n";
    $EXIT_CODE = 1;
  }
  return;
}

sub _perform_count {
  my ($table, $dbh, $schema) = @_;
  
  my @name;
  push(@name, $schema) if $schema;
  push(@name, $table);
  my $qualified_name =
      join( q{.}, map { $dbh->quote_identifier($_) } @name );
  
  my $sql = 'SELECT COUNT(*) FROM '. $qualified_name;
  my ($count) = $dbh->
      selectrow_array($sql);
  
  return $count; 
}

sub _parse_options {
  my @options = qw(
    host=s targethost=s
    port=i targetport=s
    user=s targetuser=s
    password=s targetpassword=s
    database=s targetdatabase=s 
    dump-directory=s

    checksum count date

    verbose
    disable-foreign-keys
    no-dump
    no-views
    use-naga

    version
    help|?
    man
  );
  
  my $opts = {};
  
  # Populates $opts
  GetOptions( $opts, @options )
      or pod2usage(2);
  
  pod2usage(1)            if $opts->{help};
  pod2usage(VERBOSE => 2) if $opts->{man};
  
  if ( $opts->{version} ) {
    print "mysqlnaga-sync version $VERSION\n";
    exit(0);
  }
  
  _confirm_options($opts);
  
  return $opts;
}

sub _confirm_options {
  my ($opts) = @_;
  
  if ( !$opts->{database} ) {
    warn "\nNeed a schema to work with (--database)\n\n";
    pod2usage(EXIT => 64, VERBOSE => 0);
  }
  
  $opts->{directory} ||= '.';
  $opts->{targetdatabase} ||= $opts->{database};
  
  $opts->{directory} = File::Spec->rel2abs($opts->{directory});
  
  return;
}

sub _schema_information {
  my $dbh = shift;
  my $db  = shift;
  
  my $schema_hash = {};
  
  my $sql = <<'SQL';
SELECT
  TABLE_NAME,
  CREATE_TIME,
  UPDATE_TIME,
  TABLE_ROWS,
  ENGINE,
  TABLE_TYPE
FROM
  information_schema.TABLES
WHERE
  TABLE_SCHEMA =?
SQL
  
  my $sth = $dbh->
      prepare($sql);
  $sth->
      execute($db);
  
  while(my $row = $sth->fetchrow_arrayref()) {
    my ($table, $created, $modified, $count, $engine, $type) = @{$row};
    
    $schema_hash->{$table} = {
      count => $count,
      view  => $type eq 'VIEW',
    };
    
    my $date = $modified || $created;
    $schema_hash->{$table}->{date} =
      DateTime::Format::MySQL->parse_datetime($date)
	  if defined $date;
    
    if(!$schema_hash->{view} && defined $engine && $engine eq 'InnoDB') {
      $schema_hash->{$table}->{count} =
          _perform_count($table, $dbh, $db);
    }
  }
  $sth->finish();
  
  return $schema_hash;
}

sub _has_database {
  my $dbh = shift;
  my $db  = shift;
  
  my $sth = $dbh->
      prepare('show databases like ?');
  $sth->
      execute($db);
  
  my $has_database = 0;
  if(my $row = $sth->fetchrow_arrayref()) {
    $has_database = 1;
  }
  $sth->finish();
  
  return $has_database;
}

sub _create_database {
  my $dbh = shift;
  my $db  = shift;
  
  my $q_db = $dbh->
      quote_identifier($db);
  
  $dbh->do('create database '. $q_db);
  return;
}

sub _switch_db {
  my $dbh = shift;
  my $db  = shift;
  
  my $q_db = $dbh->
      quote_identifier($db);
  return $dbh->do('use '. $q_db);
}

sub _checksum {
  my ($dbh, $table) = @_;
  my $q_table = $dbh->
      quote_identifier($table);
  my $sql = "CHECKSUM TABLE ${q_table}";
  my @row_ary = $dbh->selectrow_array($sql);
  return pop @row_ary;
}

sub _analyse {
  my ($table) = @_;
  my $dbh = $TARGET_DBH;
  verbose("\tRunning analyse");
  my $q_table =
      $dbh->quote_identifier($table);
  my $sql = "ANALYZE TABLE $q_table";
  return $dbh->do($sql);
}

sub _drop_table {
  my ($dbh, $table) = @_;
  my $q_table =
      $dbh->quote_identifier($table);
  my $sql = "DROP TABLE ${q_table}";
  return $dbh->do($sql);
}

sub _drop_view {
  my ($dbh, $view) = @_;
  my $q_view = $dbh->
      quote_identifier($view);
  my $sql = "DROP VIEW ${q_view}";
  return $dbh->do($sql);
}

sub _mysqlnaga_populate_table {
  my ($table) = @_;
  
  _toggle_foreign_key(0);
  
  _copy_table_ddl($table);
  
  _toggle_foreign_key(1);
  
  my $cwd = cwd();
  chdir(_dir());
  
  if($NO_DUMP) {
    verbose("\tNot writing data out as given --no-dump at the command line");
  } 
  else {
    verbose("\tWriting table data out");
    my @mysqlnaga_options;
    push(@mysqlnaga_options, q{--host}, $OPTIONS->{host}) if $OPTIONS->{host};
    push(@mysqlnaga_options, q{--port}, $OPTIONS->{port}) if $OPTIONS->{port};
    push(@mysqlnaga_options, q{--user}, $OPTIONS->{user}) if $OPTIONS->{user};
    push(@mysqlnaga_options, q{--pass}, $OPTIONS->{password}) if $OPTIONS->{password};
    push(@mysqlnaga_options, q{--verbose}) if $VERBOSE;
    push(@mysqlnaga_options, q{--database}, $SOURCE_DB);
    push(@mysqlnaga_options, q{--directory}, cwd());
    push(@mysqlnaga_options, q{--tables}, $table);
    push(@mysqlnaga_options, q{--fields-optionally-enclosed-by}, q{'`'});
    
    ## Should this be conditional on the option passed?
    push(@mysqlnaga_options, q{--blocking-select});
    
    my $mysqlnaga_cmd =
        join(' ', '/home/dbolser/danbolser-mysqlnaga/bin/mysqlnaga',
             @mysqlnaga_options);
    
    verbose("\n$mysqlnaga_cmd\n");
    system($mysqlnaga_cmd)
        and die "Could not complete the dump with the command '$mysqlnaga_cmd': $!";
  }
  
  verbose("\tPopulating table data");
  my @mysqlnaga_loader_options;
  push(@mysqlnaga_loader_options, q{--host}, $OPTIONS->{targethost}) if $OPTIONS->{targethost};
  push(@mysqlnaga_loader_options, q{--port}, $OPTIONS->{targetport}) if $OPTIONS->{targetport};
  push(@mysqlnaga_loader_options, q{--user}, $OPTIONS->{targetuser}) if $OPTIONS->{targetuser};
  push(@mysqlnaga_loader_options, q{--pass}, $OPTIONS->{targetpassword}) if $OPTIONS->{targetpassword};
  push(@mysqlnaga_loader_options, q{--verbose}) if $VERBOSE;
  push(@mysqlnaga_loader_options, q{--database}, $TARGET_DB);
  push(@mysqlnaga_loader_options, q{--directory}, cwd());
  push(@mysqlnaga_loader_options, q{--tables}, $table);
  push(@mysqlnaga_loader_options, q{--fields-optionally-enclosed-by}, q{'`'});
  push(@mysqlnaga_loader_options, q{--disable-foreign-keys})
      if $DISABLE_FK;
  
  my $mysqlnaga_loader_cmd =
      join(' ', '/home/dbolser/danbolser-mysqlnaga/bin/mysqlnaga-loader',
           @mysqlnaga_loader_options);

  verbose("\n$mysqlnaga_loader_cmd\n");
  system($mysqlnaga_loader_cmd)
      and die "Could not complete the load with the command '$mysqlnaga_loader_cmd': $!";
  
  chdir($cwd);
  
  return;
}

sub _copy_view_ddl {
  my $view = shift;
  return _copy_table_ddl($view, 1);
}

sub _copy_table_ddl {
  my ($table, $work_as_view) = @_;
  
  verbose("\tCreating table from source schema");
  my $q_table = $SOURCE_DBH->
      quote_identifier($table);
  my $sql = "SHOW CREATE TABLE ${q_table}";
  my @row_ary = $SOURCE_DBH->
      selectrow_array($sql);
  
  my ($table_name, $ddl) = @row_ary;
  
  if($work_as_view) {
    $ddl = _alter_view($ddl);
  }
  
  if($NO_DUMP) {
    verbose("\tNo SQL written as --no-dump given at the command line");
  }
  else {
    _write_ddl($table, $ddl);
  }
  
  $TARGET_DBH->do($ddl);
  
  return;
}

## Used to change the security to invoker & to remove the definer code
sub _alter_view {
  my ($ddl) = @_;
  verbose("\tRemoving DEFINER and setting SECURITY for view to INVOKER for portability");
  $ddl =~ s/ DEFINER=[a-zA-Z0-9`@%]+ / /;
  $ddl =~ s/SQL SECURITY DEFINER/SQL SECURITY INVOKER/;
  
  return $ddl;
}

sub _mysqldump_populate_table {
  my ($table) = @_;
  
  _toggle_foreign_key(0);
  
  _copy_table_ddl($table);
  
  my $q_table = $SOURCE_DBH->quote_identifier($table);
  my $filename = _file($table, 'txt');
  
  if($NO_DUMP) {
    verbose("\tNo table data written as --no-dump given at the command line");
  }
  else {
    verbose("\tWriting table data out");
    my $write_data_out_sql = <<SQL;
SELECT * from ${q_table} INTO OUTFILE '${filename}'
FIELDS ESCAPED BY '\\\\'
SQL
    
    $SOURCE_DBH->do("LOCK TABLES ${q_table} READ");
    $SOURCE_DBH->do($write_data_out_sql);
    $SOURCE_DBH->do('UNLOCK TABLES');
  }
  
  verbose("\tPopulating table data");
  my $write_data_in_sql = <<SQL;
LOAD DATA INFILE '${filename}' INTO TABLE ${q_table}
FIELDS ESCAPED BY '\\\\'
SQL
  $TARGET_DBH->do("LOCK TABLES ${q_table} WRITE");
  $TARGET_DBH->do($write_data_in_sql);
  $TARGET_DBH->do("UNLOCK TABLES");
  
  _toggle_foreign_key(1);
  
  return;
}

sub _dir {
  my $dir = File::Spec->catdir($OPTIONS->{directory}, $OPTIONS->{database});
  if(! -d $dir) {
    make_path($dir, {verbose => 0}) or die "Cannot create directory $dir: $!";
    my $mode = 0777;
    chmod $mode, $dir or die "Cannot chmod $dir to mode $mode: $!"; 
  }
  return $dir;
}

sub _file {
  my ($table, $ext) = @_;
  my $dir = _dir();
  my $filename = File::Spec->catfile($dir, $table.'.'.$ext);
  if(-f $filename) {
    if($NO_DUMP) {
      verbose("\tFile $filename already exists but not removing as --no-dump is on");
    }
    else {
      verbose("\tFile $filename already exists. Removing");
      unlink $filename;
    }
  }
  return $filename;
}

sub _write_ddl {
  my ($table, $ddl) = @_;
  my $filename = _file($table, 'sql');
  open my $fh, '>', $filename
      or die "Cannot open $filename for write: $!";
  print $fh $ddl;
  print $fh "\n";
  close $fh;
  
  return;
}

## We only need to do this on the TARGET database (we don't touch the
## SOURCE database).
sub _toggle_foreign_key {
  my $on = shift;
  
  if($DISABLE_FK) {
    my $cmd = ($on) ? 1 : 0;
    verbose("\t\tToggling foreign key checks to '$cmd'");
    
    $TARGET_DBH->do( "SET foreign_key_checks = $cmd" );
  }
  
  return;
}


=pod

=head1 DESCRIPTION

Provides a functionality similar to the mysqlnaga and mysqlnaga-loader scripts
except in this situation we do the transfer of data only if it detects that:

=over 8

=item A table does not exist in the target schema

=item The last time the source schema's table was modified was after the target's last modified time

=item Row counts differ

=item Checksums differ

=back

You can choose one of these strategies to detect when a transfer should occur
however the recommened is last modified time as this requires the smallest 
amount of work from the database.  

The code will remove any dump files from a target directory if you are 
building incremental flat file dumps (for backup or public release of
a database) and after a load will ensure that the row counts of the tables
match each other in the source and target database.

Views are also supported but are only transported using the security
B<INVOKER> to aid portability. The code cannot assume the target server
will have the same user settings as the current server and populations
can be performed by higher level users & could pose a security issue. You
can specify the B<-no_views> option to skip their transfer and you will
be responsible for transferring them.

=head1 OPTIONS

=over 8

=item B<--checksum>

Use MySQL checksums to calculate if a table has changed

=item B<--count>

Use row counts to calculate if a table has changed

=item B<--date>

Use the last modified date/created date to calculate if a table has changed

=item B<--directory>

The base directory to dump text files to. If not specified the program
will use the cwd. A directory will be created in the base directory
with same name as the database being transferred with all files being
dumped into here.

=item B<--use-naga>

If switched on will force the use of mysqlnaga and mysqlnaga-loader. The
files produced will use a slightly different format as what mysqldump would have
produced since we cannot support this functionality 1:1

=item B<--no-dump>

This will assume that the directory we are using already has files in there
from a previous run. This is useful when you have multiple targets for your
syncs.

=item B<--no-views>

This will skip the transfer of views from the source to target as well
as removing those views which no longer appear in the source but do in
the target

=item B<--disable-foreign-keys>

Turns off the flag for foreign key checks in the DB connection. Useful 
if you are transferring an InnoDB schema

=item B<--database>

The database to work with

=item B<--host>

Host the MySQL server is located on

=item B<--password>

Password for the target server

=item B<--port>

Port for the server

=item B<--user>

User to connect to the DB with

=item B<--targethost>

Host the target MySQL server is located on

=item B<--targetpassword>

Password for the target server

=item B<--targetport>

Port for the target server

=item B<--targetuser>

User to connect to the target DB with

=item B<--verbose>

Print verbose logging messages along with the dump. These go to STDERR

=item B<--version>

Print vesion and exit

=item B<--help | --?>

This message

=item B<--man>

Perldoc with more information than -help alone

=back

=head1 DEPENDENCIES

=over 8

=item DBD::mysql

=item DateTime

=item DateTime::Format::MySQL

=back

=head1 WHY NAGA

Because the program attempts to be smoking hot at copying databases. Also
naga is a lot smaller the jalepeno (and easier to remember).

=head1 AUTHOR

Andrew Yates

=head1 LICENSE

Copyright (c) 2010, EMBL
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that thefollowing conditions are met:

* Redistributions of source code must retain the above copyright
  notice, this list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in the
  documentation and/or other materials provided with the distribution.

* Neither the name of the EMBL nor the names of its contributors may
  be used to endorse or promote products derived from this software
  without specific prior written permission.


THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

=head1 VERSION

1.0

=cut

## Subroutines common to all programs. Although this is a package, we
## simply 'requier' it for ease of installation. CPAN you say?

sub verbose {
  if ($VERBOSE) {
    warn @_, "\n";
  }
  return;
}

## Doesn't DBI provide a helper for this?
sub _open_dbh {
    my $type = shift || 'source';

    ## If type is 'target', we use an alternative set of options,
    ## simply distinguished by a consistent prefix
    my $option_prefix = $type eq 'target' ? 'target' : '';
    
    ## Read the options
    my $host = $OPTIONS->{$option_prefix. 'host'} || '';
    my $port = $OPTIONS->{$option_prefix. 'port'} || '';
    my $user = $OPTIONS->{$option_prefix. 'user'} || undef;
    my $password = $OPTIONS->{$option_prefix. 'password'} || undef;
    
    ## We 'DNS-ify' some of the options:
    $host = "host=$host" if $host;
    $port = "port=$port" if $port;
    
    ## And handle a couple of others...
    my $block = $OPTIONS->{blocking_select} ? "mysql_use_result=1" : '';
    my $extra = "mysql_local_infile=1";
    
    ## Build the DSN
    my $dsn = "DBI:mysql:".
        join(';', $host, $port, $block, $extra);
    
    verbose("DSN:$dsn");
    
    return
      DBI->connect( $dsn, $user, $password, { RaiseError => 1 } );
}
